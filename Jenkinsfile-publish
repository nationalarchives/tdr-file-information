library(tdr-jenkinslib)

def versionBumpBranch = "version-bump-${BUILD_NUMBER}-${params.VERSION}"

pipeline {
  agent none

  parameters {
    choice(name: "VERSION", choices: ["patch", "minor", "major"], description: "The stage you are building the front end for")
  }
  stages {
    stage("Create new GitHub branch") {
      agent {
        label "master"
      }
      steps {
        checkout scm
        script {
          tdr.createGitHubBranch(versionBumpBranch)
        }
      }
    }
    stage("Publish package and commit changes to GitHub") {
        agent {
            ecs {
                inheritFrom "npm"
            }
        }
        
        steps {
            sh "git checkout ${versionBumpBranch}"

            sh 'npm ci'
            sh 'npm run build:prod'
            sh 'git config --global user.email tna-digital-archiving-jenkins@nationalarchives.gov.uk'
            sh 'git config --global user.name tna-digital-archiving-jenkins'
            sshagent(['github-jenkins']) {
              sh "npm version ${params.VERSION}"
            }
            
            withCredentials([string(credentialsId: 'npm-login', variable: 'LOGIN_TOKEN')]) {
                sh "npm config set //registry.npmjs.org/:_authToken=$LOGIN_TOKEN"
                sh 'npm publish --access public'
            }

            script {
              tdr.commitAndPushGitHubBranch(versionBumpBranch, "Version bump from build ${env.BUILD_NUMBER}")
            }
        }
    }
    stage("Create version bump pull request") {
      agent {
        label "master"
      }
      steps {
        script {
          tdr.createGitHubPullRequest(
            pullRequestTitle: "Version Bump from build number ${BUILD_NUMBER}",
            buildUrl: env.BUILD_URL,
            repo: "tdr-file-metadata",
            branchToMergeTo: "master",
            branchToMerge: versionBumpBranch
          )
        }
      }
    }
  }
}
